//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.225
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace AdminOpciones.SrvPortfolioAndBook {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SrvPortfolioAndBook.LoadPortfolioSoap")]
    public interface LoadPortfolioSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/getPortfolioAndBook", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetPortfolioAndBook(string Username, System.AsyncCallback callback, object asyncState);
        
        string EndgetPortfolioAndBook(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/getPortfolioAndBookAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BegingetPortfolioAndBookAll(System.AsyncCallback callback, object asyncState);
        
        string EndgetPortfolioAndBookAll(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LoadPortfolioSoapChannel : AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPortfolioAndBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPortfolioAndBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPortfolioAndBookAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPortfolioAndBookAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadPortfolioSoapClient : System.ServiceModel.ClientBase<AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap>, AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap {
        
        private BeginOperationDelegate onBegingetPortfolioAndBookDelegate;
        
        private EndOperationDelegate onEndgetPortfolioAndBookDelegate;
        
        private System.Threading.SendOrPostCallback ongetPortfolioAndBookCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPortfolioAndBookAllDelegate;
        
        private EndOperationDelegate onEndgetPortfolioAndBookAllDelegate;
        
        private System.Threading.SendOrPostCallback ongetPortfolioAndBookAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LoadPortfolioSoapClient() {
        }
        
        public LoadPortfolioSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoadPortfolioSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoadPortfolioSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoadPortfolioSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("No se puede establecer el objeto CookieContainer. Asegúrese de que el enlace cont" +
                            "iene un objeto HttpCookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getPortfolioAndBookCompletedEventArgs> getPortfolioAndBookCompleted;
        
        public event System.EventHandler<getPortfolioAndBookAllCompletedEventArgs> getPortfolioAndBookAllCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap.BegingetPortfolioAndBook(string Username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPortfolioAndBook(Username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap.EndgetPortfolioAndBook(System.IAsyncResult result) {
            return base.Channel.EndgetPortfolioAndBook(result);
        }
        
        private System.IAsyncResult OnBegingetPortfolioAndBook(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Username = ((string)(inValues[0]));
            return ((AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap)(this)).BegingetPortfolioAndBook(Username, callback, asyncState);
        }
        
        private object[] OnEndgetPortfolioAndBook(System.IAsyncResult result) {
            string retVal = ((AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap)(this)).EndgetPortfolioAndBook(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPortfolioAndBookCompleted(object state) {
            if ((this.getPortfolioAndBookCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPortfolioAndBookCompleted(this, new getPortfolioAndBookCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPortfolioAndBookAsync(string Username) {
            this.getPortfolioAndBookAsync(Username, null);
        }
        
        public void getPortfolioAndBookAsync(string Username, object userState) {
            if ((this.onBegingetPortfolioAndBookDelegate == null)) {
                this.onBegingetPortfolioAndBookDelegate = new BeginOperationDelegate(this.OnBegingetPortfolioAndBook);
            }
            if ((this.onEndgetPortfolioAndBookDelegate == null)) {
                this.onEndgetPortfolioAndBookDelegate = new EndOperationDelegate(this.OnEndgetPortfolioAndBook);
            }
            if ((this.ongetPortfolioAndBookCompletedDelegate == null)) {
                this.ongetPortfolioAndBookCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPortfolioAndBookCompleted);
            }
            base.InvokeAsync(this.onBegingetPortfolioAndBookDelegate, new object[] {
                        Username}, this.onEndgetPortfolioAndBookDelegate, this.ongetPortfolioAndBookCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap.BegingetPortfolioAndBookAll(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetPortfolioAndBookAll(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap.EndgetPortfolioAndBookAll(System.IAsyncResult result) {
            return base.Channel.EndgetPortfolioAndBookAll(result);
        }
        
        private System.IAsyncResult OnBegingetPortfolioAndBookAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap)(this)).BegingetPortfolioAndBookAll(callback, asyncState);
        }
        
        private object[] OnEndgetPortfolioAndBookAll(System.IAsyncResult result) {
            string retVal = ((AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap)(this)).EndgetPortfolioAndBookAll(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetPortfolioAndBookAllCompleted(object state) {
            if ((this.getPortfolioAndBookAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPortfolioAndBookAllCompleted(this, new getPortfolioAndBookAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPortfolioAndBookAllAsync() {
            this.getPortfolioAndBookAllAsync(null);
        }
        
        public void getPortfolioAndBookAllAsync(object userState) {
            if ((this.onBegingetPortfolioAndBookAllDelegate == null)) {
                this.onBegingetPortfolioAndBookAllDelegate = new BeginOperationDelegate(this.OnBegingetPortfolioAndBookAll);
            }
            if ((this.onEndgetPortfolioAndBookAllDelegate == null)) {
                this.onEndgetPortfolioAndBookAllDelegate = new EndOperationDelegate(this.OnEndgetPortfolioAndBookAll);
            }
            if ((this.ongetPortfolioAndBookAllCompletedDelegate == null)) {
                this.ongetPortfolioAndBookAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPortfolioAndBookAllCompleted);
            }
            base.InvokeAsync(this.onBegingetPortfolioAndBookAllDelegate, null, this.onEndgetPortfolioAndBookAllDelegate, this.ongetPortfolioAndBookAllCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap CreateChannel() {
            return new LoadPortfolioSoapClientChannel(this);
        }
        
        private class LoadPortfolioSoapClientChannel : ChannelBase<AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap>, AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap {
            
            public LoadPortfolioSoapClientChannel(System.ServiceModel.ClientBase<AdminOpciones.SrvPortfolioAndBook.LoadPortfolioSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetPortfolioAndBook(string Username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Username;
                System.IAsyncResult _result = base.BeginInvoke("getPortfolioAndBook", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetPortfolioAndBook(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getPortfolioAndBook", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetPortfolioAndBookAll(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getPortfolioAndBookAll", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetPortfolioAndBookAll(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getPortfolioAndBookAll", _args, result)));
                return _result;
            }
        }
    }
}
